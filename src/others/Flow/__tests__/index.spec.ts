/* eslint-disable no-console */
import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';
import { flow } from '../index';

describe('flow', () => {
  beforeEach(() => {
    vi.useFakeTimers();
  });

  afterEach(() => {
    vi.useRealTimers();
  });

  it('should receiver normal function list and return function "run"', async () => {
    const result: number[] = [];
    flow([
      () => result.push(1),
      () => result.push(2),
    ]).run(() => result.push(100));

    await vi.advanceTimersToNextTimerAsync();
    expect(result).toEqual([1, 2, 100]);
  });

  it('should can delay execute function', async () => {
    const stop = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

    const result: number[] = [];
    flow([
      () => result.push(1),
      () => stop(1000).then(() => result.push(3)),
      () => result.push(2),
    ]).run(() => result.push(100));

    expect(result).toEqual([1]);

    await vi.advanceTimersToNextTimerAsync();
    expect(result).toEqual([1, 3, 2, 100]);
  });

  it('should can handle object which is generated by "flow"', async () => {
    const result: number[] = [];

    const stop = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

    const subFlow = flow([
      () => stop(1000).then(() => result.push(3)),
    ]);

    flow([
      () => result.push(1),
      () => result.push(2),
      subFlow]).run(() => result.push(100));

    expect(result).toEqual([1]);

    await vi.advanceTimersToNextTimerAsync();
    expect(result).toEqual([1, 2, 3, 100]);
  });

  it('should can handle Array', async () => {
    const result: number[] = [];

    const stop = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

    flow([
      () => result.push(1),
      [() => stop(1000).then(() => result.push(4)), () => result.push(5)],
      () => result.push(2),
    ]).run(() => result.push(100));

    expect(result).toEqual([1]);

    await vi.advanceTimersToNextTimerAsync();
    expect(result).toEqual([1, 4, 5, 2, 100]);
  });

  it('should pass all cases', async () => {
    const resultLog: string[] = [];
    vi.spyOn(console, 'log').mockImplementation((string) => {
      resultLog.push(string);
    });

    const stop = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

    const subFlow = flow([
      () => stop(1000).then(() => console.log('3')),
    ]);

    flow([
      () => console.log('1'),
      () => console.log('2'),
      subFlow,
      [() => stop(1000).then(() => console.log('4')), () => console.log('5')],
      () => console.log('6'),
    ]).run(() => {
      console.log('done');
    });

    await vi.advanceTimersToNextTimerAsync();
    expect(resultLog).toEqual(['1', '2', '3']);

    await vi.advanceTimersToNextTimerAsync();
    expect(resultLog).toEqual(['1', '2', '3', '4', '5', '6', 'done']);
  });
});
